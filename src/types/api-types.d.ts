declare namespace Api {

	/*
	 Generated by typeshare 1.7.0
	*/

	/**
	 * Product database model, matching [crate::schema::products].
	 *
	 * This represents all the products that could be have been or are stored in one of the freezers.
	 * The expiration time is used to calculate the expiration date of the different storage items in
	 * the freezers and can be used to help the user which storage items should be consumed first.
	 */
	interface Product {
		/** Product id. */
		productId: number;
		/** Product name, must be unique and not longer than 50 characters. */
		name: string;
		/** Time until product expires, defined in whole months. Defaults to 6 months if not given. */
		expirationMonths: number;
	}

	/**
	 * Freezer database model, matching [crate::schema::freezers].
	 *
	 * This model represents the different freezers that might be in use at the user.
	 */
	interface Freezer {
		/** Freezer id. */
		freezerId: number;
		/** Freezer name, must be unique and not longer than 50 characters. */
		name: string;
	}

	/**
	 * Drawer database model, matching [crate::schema::drawers].
	 *
	 * This represents the different drawers that could be present in the different freezers in use.
	 *
	 * # Constraints
	 *
	 * The combination of [Self::name] and [Self::freezer_id] must be unique.
	 */
	interface Drawer {
		/** Drawer id. */
		drawerId: number;
		/** Drawer name, must be unique within the same [Self::freezer_id] */
		name: string;
		/** Freezer id. */
		freezerId: number;
	}

	/**
	 * Storage database model, matching [crate::schema::storage].
	 *
	 * This model represents all the different items that could be stored in any of the freezer drawers.
	 * The date in will be either automatically set to the current date when not filled in, while the
	 * date out will only be set once the product is withdrawn from the freezer.
	 */
	interface Storage {
		/** Storage id, serial number */
		storageId: number;
		/** ID of product selected */
		productId: number;
		/** Location of the product in the storage. */
		drawerId: number;
		/** Weight of the product being stored, expressed in grams. */
		weightGrams: number;
		/** Date of storage, defaults to the current date. Derived from `DateTime<Local>` and parsed into Date string. */
		dateIn: Date;
		/** Date taken out of storage. */
		dateOut?: Date;
	}

	/** Insertable product containing the required fields. */
	interface NewProduct {
		/** **Required, Unique**: The name of the product. */
		name: string;
		/** **Optional**: The time until expiration in months. Defaults to 6 months. */
		expirationMonths?: number;
	}

	/** Insertable storage item containing the required fields. */
	interface NewStorageItem {
		/** **Required**: Id linked to product. */
		productId: number;
		/** **Required**: ID of the drawer in which the product will be stored. */
		drawerId: number;
		/** **Required**: The storage item weight, expressed in grams. */
		weightGrams: number;
		/** **Required**: Date in */
		dateIn: Date;
	}

	/** Insertable freezer containing the required fields. */
	interface NewFreezer {
		/** **Required, Unique**: Freezer name. */
		name: string;
	}

	/** Insertable freezer drawer containing the required fields. */
	interface NewDrawer {
		/** **Required, Unique per `freezer_id`**: Drawer name. */
		name: string;
		/** **Required**: Freezer id to which the drawer should be assigned to. */
		freezerId: number;
	}

	/** Struct representing the app version segments. */
	interface Version {
		major: number;
		minor: number;
		patch: number;
		pre?: string;
	}
}

